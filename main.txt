#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>

const int MAX_TERM_LENGTH = 256;
const int MAX_URL_LENGTH = 1024;

// Data structure for a document entry
struct Document {
    std::string term;
    int docID;
};

// Function to parse the .trec file and create intermediate posting lists
int parseTrecFile(const std::string& filename) {

    std::ifstream trecFile(filename);
    if (!trecFile.is_open()) {
        std::cerr << "Failed to open the .trec file." << std::endl;
        exit(1);
    }

    std::vector<Document> documents;
    std::string line;
    
    while (std::getline(trecFile, line)) {
        std::istringstream iss(line);
        Document doc;
        
        if (iss >> doc.term) {
            if (!(iss >> doc.docID)) {
                // Failed to parse docID
                std::cerr << "Failed to parse docID in line: " << line << std::endl;
                continue;
            }
            // Successfully parsed term and docID
            std::cerr << "Successful in parsing docID in line: " << line << std::endl;
            documents.push_back(doc);
        } else {
            // Failed to parse term
            std::cerr << "Failed to parse term in line: " << line << std::endl;
        }
    }
    
    // Process the documents vector as needed
    for (const Document& doc : documents) {
        std::cout << "Term: " << doc.term << ", DocID: " << doc.docID << std::endl;
    }
    
    trecFile.close();
}

int main() {
    const std::string trecFilename = "D:\\Notes\\Web Search Engines\\Assignment 2\\fulldocs-new.trec";

    parseTrecFile(trecFilename);

    // Add your remaining functions for sorting, compression, and storing data

    return 0;
}



-------------------------------------------------------



#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>

const int MAX_TERM_LENGTH = 256;
const int MAX_URL_LENGTH = 1024;

// Data structure for a document entry
struct Document {
    std::string term;
    int docID;
};

// Function to parse the .trec file and create intermediate posting lists
void parseTrecFile(const std::string& filename, std::vector<std::string>& urls, std::vector<std::string>& documents) {
    std::ifstream trecFile(filename);
    if (!trecFile.is_open()) {
        std::cerr << "Failed to open the .trec file." << std::endl;
        exit(1);
    }

    // std::vector<Document> parsedDocuments;
    std::string line;
    std::string documentContent;
    bool isInsideTextTag = false;

    while (std::getline(trecFile, line)) {
        std::cout << "line: " << line << std::endl;
        if (line.find("<TEXT>") != std::string::npos) {
            isInsideTextTag = true;
            // Reset URL and document content when entering <TEXT> tag
            documentContent.clear();
            continue;  // Skip the line with "<TEXT>"
        }
        if (line.find("</TEXT>") != std::string::npos) {
            isInsideTextTag = false;
            continue;  // Skip the line with "</TEXT>"
        }

        if (isInsideTextTag) {
            // Inside <TEXT>, split the content by "\n"
            std::size_t newlinePos = line.find("\n");
            if (newlinePos != std::string::npos) {
                // Split the content based on "\n"
                std::string urlPart = line.substr(0, newlinePos);
                std::string documentPart = line.substr(newlinePos + 1);
                urls.push_back(urlPart);
                documents.push_back(documentPart);
                std::cout << "urlPart: " << urlPart << ", Document: " << documentPart << std::endl;
            } 
            // else {
            //     // No newline character, consider this as URL
            //     urls.push_back(line);
            // }
        } 
        // else {
        //     // Outside <TEXT>, consider this as URL
        //     urls.push_back(line);
        // }

        // std::istringstream iss(line);
        // Document doc;

        // if (iss >> doc.term) {
        //     if (!(iss >> doc.docID)) {
        //         // Failed to parse docID
        //         urls.push_back(line);  // Add the URL
        //     } else {
        //         // Successfully parsed term and docID
        //         parsedDocuments.push_back(doc);
        //     }
        // }
    }

    // Process the parsed documents as needed
    // for (const Document& doc : parsedDocuments) {
    //     std::cout << "Term: " << doc.term << ", DocID: " << doc.docID << std::endl;
    // }
}

int main() {
    const std::string trecFilename = "D:\\Notes\\Web Search Engines\\Assignment 2\\fulldocs-new.trec";
    std::vector<std::string> urls;
    std::vector<std::string> documents;

    parseTrecFile(trecFilename, urls, documents);

    // You now have URLs and documents with their corresponding parts.
    // Process them further as needed.

    return 0;
}
